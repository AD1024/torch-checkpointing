import torch
import torch.utils.checkpoint
import random

class ResNet18(torch.nn.Module):
    def __init__(self):
        self.weights = [torch.randn((64, 3, 7, 7)) * 1e-7, torch.randn((64,)) * 1e-7, torch.randn((64,)) * 1e-7, torch.randn((64,)) * 1e-7, torch.randn((64,)) * 1e-7, random.randint(32, 64), torch.randn((64, 64, 3, 3)) * 1e-7, torch.randn((64,)) * 1e-7, torch.randn((64,)) * 1e-7, torch.randn((64,)) * 1e-7, torch.randn((64,)) * 1e-7, random.randint(32, 64), torch.randn((64, 64, 3, 3)) * 1e-7, torch.randn((64,)) * 1e-7, torch.randn((64,)) * 1e-7, torch.randn((64,)) * 1e-7, torch.randn((64,)) * 1e-7, random.randint(32, 64), torch.randn((64, 64, 3, 3)) * 1e-7, torch.randn((64,)) * 1e-7, torch.randn((64,)) * 1e-7, torch.randn((64,)) * 1e-7, torch.randn((64,)) * 1e-7, random.randint(32, 64), torch.randn((64, 64, 3, 3)) * 1e-7, torch.randn((64,)) * 1e-7, torch.randn((64,)) * 1e-7, torch.randn((64,)) * 1e-7, torch.randn((64,)) * 1e-7, random.randint(32, 64), torch.randn((128, 64, 3, 3)) * 1e-7, torch.randn((128,)) * 1e-7, torch.randn((128,)) * 1e-7, torch.randn((128,)) * 1e-7, torch.randn((128,)) * 1e-7, random.randint(32, 64), torch.randn((128, 128, 3, 3)) * 1e-7, torch.randn((128,)) * 1e-7, torch.randn((128,)) * 1e-7, torch.randn((128,)) * 1e-7, torch.randn((128,)) * 1e-7, random.randint(32, 64), torch.randn((128, 64, 1, 1)) * 1e-7, torch.randn((128,)) * 1e-7, torch.randn((128,)) * 1e-7, torch.randn((128,)) * 1e-7, torch.randn((128,)) * 1e-7, random.randint(32, 64), torch.randn((128, 128, 3, 3)) * 1e-7, torch.randn((128,)) * 1e-7, torch.randn((128,)) * 1e-7, torch.randn((128,)) * 1e-7, torch.randn((128,)) * 1e-7, random.randint(32, 64), torch.randn((128, 128, 3, 3)) * 1e-7, torch.randn((128,)) * 1e-7, torch.randn((128,)) * 1e-7, torch.randn((128,)) * 1e-7, torch.randn((128,)) * 1e-7, random.randint(32, 64), torch.randn((256, 128, 3, 3)) * 1e-7, torch.randn((256,)) * 1e-7, torch.randn((256,)) * 1e-7, torch.randn((256,)) * 1e-7, torch.randn((256,)) * 1e-7, random.randint(32, 64), torch.randn((256, 256, 3, 3)) * 1e-7, torch.randn((256,)) * 1e-7, torch.randn((256,)) * 1e-7, torch.randn((256,)) * 1e-7, torch.randn((256,)) * 1e-7, random.randint(32, 64), torch.randn((256, 128, 1, 1)) * 1e-7, torch.randn((256,)) * 1e-7, torch.randn((256,)) * 1e-7, torch.randn((256,)) * 1e-7, torch.randn((256,)) * 1e-7, random.randint(32, 64), torch.randn((256, 256, 3, 3)) * 1e-7, torch.randn((256,)) * 1e-7, torch.randn((256,)) * 1e-7, torch.randn((256,)) * 1e-7, torch.randn((256,)) * 1e-7, random.randint(32, 64), torch.randn((256, 256, 3, 3)) * 1e-7, torch.randn((256,)) * 1e-7, torch.randn((256,)) * 1e-7, torch.randn((256,)) * 1e-7, torch.randn((256,)) * 1e-7, random.randint(32, 64), torch.randn((512, 256, 3, 3)) * 1e-7, torch.randn((512,)) * 1e-7, torch.randn((512,)) * 1e-7, torch.randn((512,)) * 1e-7, torch.randn((512,)) * 1e-7, random.randint(32, 64), torch.randn((512, 512, 3, 3)) * 1e-7, torch.randn((512,)) * 1e-7, torch.randn((512,)) * 1e-7, torch.randn((512,)) * 1e-7, torch.randn((512,)) * 1e-7, random.randint(32, 64), torch.randn((512, 256, 1, 1)) * 1e-7, torch.randn((512,)) * 1e-7, torch.randn((512,)) * 1e-7, torch.randn((512,)) * 1e-7, torch.randn((512,)) * 1e-7, random.randint(32, 64), torch.randn((512, 512, 3, 3)) * 1e-7, torch.randn((512,)) * 1e-7, torch.randn((512,)) * 1e-7, torch.randn((512,)) * 1e-7, torch.randn((512,)) * 1e-7, random.randint(32, 64), torch.randn((512, 512, 3, 3)) * 1e-7, torch.randn((512,)) * 1e-7, torch.randn((512,)) * 1e-7, torch.randn((512,)) * 1e-7, torch.randn((512,)) * 1e-7, random.randint(32, 64), torch.randn((1000, 512)) * 1e-7, torch.randn((1000,)) * 1e-7]

    
    def forward_(self, var_0, var_1, var_2, var_3, var_4, var_5, var_6, var_7, var_8, var_9, var_10, var_11, var_12, var_13, var_14, var_15, var_16, var_17, var_18, var_19, var_20, var_21, var_22, var_23, var_24, var_25, var_26, var_27, var_28, var_29, var_30, var_31, var_32, var_33, var_34, var_35, var_36, var_37, var_38, var_39, var_40, var_41, var_42, var_43, var_44, var_45, var_46, var_47, var_48, var_49, var_50, var_51, var_52, var_53, var_54, var_55, var_56, var_57, var_58, var_59, var_60, var_61, var_62, var_63, var_64, var_65, var_66, var_67, var_68, var_69, var_70, var_71, var_72, var_73, var_74, var_75, var_76, var_77, var_78, var_79, var_80, var_81, var_82, var_83, var_84, var_85, var_86, var_87, var_88, var_89, var_90, var_91, var_92, var_93, var_94, var_95, var_96, var_97, var_98, var_99, var_100, var_101, var_102, var_103, var_104, var_105, var_106, var_107, var_108, var_109, var_110, var_111, var_112, var_113, var_114, var_115, var_116, var_117, var_118, var_119, var_120, var_121, var_122):
        var_387 = torch._convolution(var_0, var_1, None, [2, 2], [3, 3], [1, 1], False, [0, 0], 1, False, False, True)
        var_392 = torch.batch_norm(var_387, var_2, var_3, var_4, var_5, False, 0.1, 1e-05, True)
        var_393 = torch.relu_(var_392)
        var_407 = torch.max_pool2d(var_393, [3, 3], [2, 2], [1, 1], [1, 1], False)
        var_426 = torch._convolution(var_407, var_7, None, [1, 1], [1, 1], [1, 1], False, [0, 0], 1, False, False, True)
        var_431 = torch.batch_norm(var_426, var_8, var_9, var_10, var_11, False, 0.1, 1e-05, True)
        var_432 = torch.relu_(var_431)
        var_451 = torch._convolution(var_432, var_13, None, [1, 1], [1, 1], [1, 1], False, [0, 0], 1, False, False, True)
        var_456 = torch.batch_norm(var_451, var_14, var_15, var_16, var_17, False, 0.1, 1e-05, True)
        var_458 = torch.add(var_456, var_407, alpha=1)
        var_459 = torch.relu_(var_458)
        var_478 = torch._convolution(var_459, var_19, None, [1, 1], [1, 1], [1, 1], False, [0, 0], 1, False, False, True)
        var_483 = torch.batch_norm(var_478, var_20, var_21, var_22, var_23, False, 0.1, 1e-05, True)
        var_484 = torch.relu_(var_483)
        var_503 = torch._convolution(var_484, var_25, None, [1, 1], [1, 1], [1, 1], False, [0, 0], 1, False, False, True)
        var_508 = torch.batch_norm(var_503, var_26, var_27, var_28, var_29, False, 0.1, 1e-05, True)
        var_510 = torch.add(var_508, var_459, alpha=1)
        var_511 = torch.relu_(var_510)
        var_530 = torch._convolution(var_511, var_31, None, [2, 2], [1, 1], [1, 1], False, [0, 0], 1, False, False, True)
        var_535 = torch.batch_norm(var_530, var_32, var_33, var_34, var_35, False, 0.1, 1e-05, True)
        var_536 = torch.relu_(var_535)
        var_555 = torch._convolution(var_536, var_37, None, [1, 1], [1, 1], [1, 1], False, [0, 0], 1, False, False, True)
        var_560 = torch.batch_norm(var_555, var_38, var_39, var_40, var_41, False, 0.1, 1e-05, True)
        var_579 = torch._convolution(var_511, var_43, None, [2, 2], [0, 0], [1, 1], False, [0, 0], 1, False, False, True)
        var_584 = torch.batch_norm(var_579, var_44, var_45, var_46, var_47, False, 0.1, 1e-05, True)
        var_586 = torch.add(var_560, var_584, alpha=1)
        var_587 = torch.relu_(var_586)
        var_606 = torch._convolution(var_587, var_49, None, [1, 1], [1, 1], [1, 1], False, [0, 0], 1, False, False, True)
        var_611 = torch.batch_norm(var_606, var_50, var_51, var_52, var_53, False, 0.1, 1e-05, True)
        var_612 = torch.relu_(var_611)
        var_631 = torch._convolution(var_612, var_55, None, [1, 1], [1, 1], [1, 1], False, [0, 0], 1, False, False, True)
        var_636 = torch.batch_norm(var_631, var_56, var_57, var_58, var_59, False, 0.1, 1e-05, True)
        var_638 = torch.add(var_636, var_587, alpha=1)
        var_639 = torch.relu_(var_638)
        var_658 = torch._convolution(var_639, var_61, None, [2, 2], [1, 1], [1, 1], False, [0, 0], 1, False, False, True)
        var_663 = torch.batch_norm(var_658, var_62, var_63, var_64, var_65, False, 0.1, 1e-05, True)
        var_664 = torch.relu_(var_663)
        var_683 = torch._convolution(var_664, var_67, None, [1, 1], [1, 1], [1, 1], False, [0, 0], 1, False, False, True)
        var_688 = torch.batch_norm(var_683, var_68, var_69, var_70, var_71, False, 0.1, 1e-05, True)
        var_707 = torch._convolution(var_639, var_73, None, [2, 2], [0, 0], [1, 1], False, [0, 0], 1, False, False, True)
        var_712 = torch.batch_norm(var_707, var_74, var_75, var_76, var_77, False, 0.1, 1e-05, True)
        var_714 = torch.add(var_688, var_712, alpha=1)
        var_715 = torch.relu_(var_714)
        var_734 = torch._convolution(var_715, var_79, None, [1, 1], [1, 1], [1, 1], False, [0, 0], 1, False, False, True)
        var_739 = torch.batch_norm(var_734, var_80, var_81, var_82, var_83, False, 0.1, 1e-05, True)
        var_740 = torch.relu_(var_739)
        var_759 = torch._convolution(var_740, var_85, None, [1, 1], [1, 1], [1, 1], False, [0, 0], 1, False, False, True)
        var_764 = torch.batch_norm(var_759, var_86, var_87, var_88, var_89, False, 0.1, 1e-05, True)
        var_766 = torch.add(var_764, var_715, alpha=1)
        var_767 = torch.relu_(var_766)
        var_786 = torch._convolution(var_767, var_91, None, [2, 2], [1, 1], [1, 1], False, [0, 0], 1, False, False, True)
        var_791 = torch.batch_norm(var_786, var_92, var_93, var_94, var_95, False, 0.1, 1e-05, True)
        var_792 = torch.relu_(var_791)
        var_811 = torch._convolution(var_792, var_97, None, [1, 1], [1, 1], [1, 1], False, [0, 0], 1, False, False, True)
        var_816 = torch.batch_norm(var_811, var_98, var_99, var_100, var_101, False, 0.1, 1e-05, True)
        var_835 = torch._convolution(var_767, var_103, None, [2, 2], [0, 0], [1, 1], False, [0, 0], 1, False, False, True)
        var_840 = torch.batch_norm(var_835, var_104, var_105, var_106, var_107, False, 0.1, 1e-05, True)
        var_842 = torch.add(var_816, var_840, alpha=1)
        var_843 = torch.relu_(var_842)
        var_862 = torch._convolution(var_843, var_109, None, [1, 1], [1, 1], [1, 1], False, [0, 0], 1, False, False, True)
        var_867 = torch.batch_norm(var_862, var_110, var_111, var_112, var_113, False, 0.1, 1e-05, True)
        var_868 = torch.relu_(var_867)
        var_887 = torch._convolution(var_868, var_115, None, [1, 1], [1, 1], [1, 1], False, [0, 0], 1, False, False, True)
        var_892 = torch.batch_norm(var_887, var_116, var_117, var_118, var_119, False, 0.1, 1e-05, True)
        var_894 = torch.add(var_892, var_843, alpha=1)
        var_895 = torch.relu_(var_894)
        var_911 = torch.nn.AdaptiveAvgPool2d([1, 1])(var_895)
        var_914 = torch.flatten(var_911, 1, -1)
        var_915 = torch.t(var_121)
        var_918 = torch.addmm(var_122, var_914, var_915, beta=1, alpha=1)
        return var_918
    
    def forward(self, inputs):
        return self.forward_(inputs, *self.weights)
